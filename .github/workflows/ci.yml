name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  # maybe could normalize to semi-standard `CI`
  RUNNING_IN_CI: 1
  RUNNING_IN_GITHUB: 1
  # increment to reset all caches
  CACHE_EPOCH: 3
  # python cruft
  PYTHONIOENCODING: utf-8
  PYTHONUNBUFFERED: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  # mamba cruft
  FORGE_URL: https://github.com/conda-forge/miniforge/releases/download
  CONDA_EXE: mamba
  FORGE: Mambaforge
  FORGE_VERSION: 4.9.2-5
  MAMBA_NO_BANNER: 1

jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu]
        python-version: [3.9]
        lab: [2.2]
        include:
          - os: ubuntu
            conda-subdir: linux-64
            forge-ext: Linux-x86_64.sh
    defaults:
      run:
        shell: bash -l {0}
    env:
      BUILDING_IN_CI: 1
    steps:
      - uses: actions/checkout@v2

      # configure builtin providers
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      # restore caches
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-${{ hashFiles('.github/reqs/pip-build.txt') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-

      - uses: actions/cache@v2
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ env.CACHE_EPOCH }}-${{ runner.os }}-node-build-${{ hashFiles('yarn.lock', '.gitub/reqs/pip-build.txt') }}

      - uses: actions/cache@v1
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        id: cache-yarn-packages
        with:
          path: .yarn-packages
          key: ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-
            ${{ env.CACHE_EPOCH }}-yarn-

      - run: pip install -U pip wheel

      - run: pip install -U -v -r .github/reqs/pip-build.txt

      - run: pip freeze && pip check

      # actually run build
      - run: doit -n4 hash_dist || doit hash_dist

      - run: doit list --all --status | sort
        if: always()

      - uses: actions/upload-artifact@v2
        with:
          name: wxyz ${{ github.run_number }} dist
          path: ./dist

  test:
    name: test ${{ matrix.conda-subdir }}-${{ matrix.python-version }}-${{ matrix.lab }}
    needs: [build]
    runs-on: ${{ matrix.os }}-latest
    env:
      TESTING_IN_CI: 1
      ATEST_RETRIES: 1
    strategy:
      # TODO: remove
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python-version: [3.6, 3.7, 3.8]
        lab: [2.2]
        include:
          - os: ubuntu
            conda-subdir: linux-64
            forge-ext: Linux-x86_64.sh
            lockname: test
          - os: macos
            conda-subdir: osx-64
            forge-ext: MacOSX-x86_64.sh
            lockname: test
          - os: windows
            forge-ext: Windows-x86_64.exe
            conda-subdir: win-64
            lockname: test
          - os: ubuntu
            python-version: 3.8
            SUPERTEST: 1
            lockname: docs
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2

      - id: lock
        run: |
          echo "::set-output name=lockfile::${{
            format(
              '.github/locks/conda.{0}.{1}-{2}-{3}.lock',
              matrix.lockname,
              matrix.conda-subdir,
              matrix.python-version,
              matrix.lab
            ) }}"

      - uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-conda-${{ matrix.python-version }}-${{
            hashFiles(steps.lock.outputs.lockfile) }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-conda-${{ matrix.python-version }}-

      - uses: actions/cache@v1
        with:
          path: .yarn-packages
          key: yarn-${{ runner.os }}-${{ hashFiles('yarn.lock', '.yarnrc') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ matrix.conda-subdir }}-
            ${{ env.CACHE_EPOCH }}-yarn-

      - uses: actions/download-artifact@v2
        with:
          name: wxyz ${{ github.run_number }} dist
          path: ./dist

      - uses: conda-incubator/setup-miniconda@v2
        with:
          use-only-tar-bz2: true
          installer-url: |
            ${{ env.FORGE_URL }}/${{ env.FORGE_VERSION }}/${{ env.FORGE }}-${{ env.FORGE_VERSION }}-${{ matrix.forge-ext }}

      - if: ${{ matrix.os != 'windows' }}
        run: mamba info --json && mamba create -p ./envs/_base test --file "${{ steps.lock.outputs.lockfile }}"

      - if: ${{ matrix.os == 'windows' }}
        shell: cmd /C CALL {0}
        run: mamba info --json && mamba create -p ./envs/_base --file "${{ steps.lock.outputs.lockfile }}"

      - if: ${{ matrix.SUPERTEST == '1' }}
        run: source "${CONDA}/bin/activate" ./envs/_base && TESTING_IN_CI=0 doit -n4 lint

      - if: ${{ matrix.os != 'windows' }}
        run: source "${CONDA}/bin/activate" ./envs/_base && doit setup_ts setup_py_ci nbtest robot || doit setup_ts setup_py_ci nbtest robot

      - if: ${{ matrix.os == 'windows' }}
        shell: cmd /C CALL {0}
        run: .github/win.bat

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: wxyz ${{ github.run_number }} atest ${{ matrix.conda-subdir }} ${{ matrix.python }} ${{ matrix.lab }}
          path:  atest/output

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: wxyz ${{ github.run_number }} nbwidgets ${{ matrix.conda-subdir }} ${{ matrix.python }} ${{ matrix.lab }}
          path: ./build/nbwidgets

      - if: ${{ matrix.SUPERTEST == '1' }}
        run: source "${CONDA}/bin/activate" ./envs/_base && TESTING_IN_CI=0 doit -n4 docs

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: wxyz ${{ github.run_number }} docs ${{ matrix.conda-subdir }} ${{ matrix.python }} ${{ matrix.lab }}
          path: build/docs

      - uses: actions/cache@v1
        with:
          path: build/check_links
          key:
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-links-${{ matrix.python-version }}-${{
            hashFiles(steps.lock.outputs.lockfile) }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-links-${{ matrix.python-version }}-

      - run: source "${CONDA}/bin/activate" ./envs/_base && TESTING_IN_CI=0 doit -n4 spell checklinks || doit spell checklinks
